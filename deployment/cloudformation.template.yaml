AWSTemplateFormatVersion: '2010-09-09'

Transform: AWS::Serverless-2016-10-31

Description: AI Powered Speech Analytics for Amazon Connect

Parameters:

  TranscribeRegion:
    Type: String
    AllowedValues:
      - eu-west-1
      - us-east-1
      - us-east-2
      - us-west-2
      - ap-southeast-2
      - ca-central-1

  LambdaLogsRetention:
    Type: Number
    Default: 7

  LambdaCodeS3Bucket:
    Type: String

  LambdaCodeS3Key:
    Type: String
    Default: amazon-connect-realtime-transcription.zip

Resources:

  PermissionInitContactDetails:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CaptureContactDetails
      Action: lambda:InvokeFunction
      Principal: connect.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  PermissionKvsConsumerTrigger:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TriggerTranscriber
      Action: lambda:InvokeFunction
      Principal: connect.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  ConnectData:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: No logging required

  ContactDetails:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: ContactId
          AttributeType: S
      KeySchema:
        - AttributeName: ContactId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True

  InboundAudio:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: ContactId
          AttributeType: S
        - AttributeName: StartTime
          AttributeType: 'N'
      KeySchema:
        - AttributeName: ContactId
          KeyType: HASH
        - AttributeName: StartTime
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TimeToLiveSpecification:
        AttributeName: ExpiresAfter
        Enabled: True
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  OutboundAudio:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: ContactId
          AttributeType: S
        - AttributeName: StartTime
          AttributeType: 'N'
      KeySchema:
        - AttributeName: ContactId
          KeyType: HASH
        - AttributeName: StartTime
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TimeToLiveSpecification:
        AttributeName: ExpiresAfter
        Enabled: True

  CaptureContactDetailsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CaptureContactDetails}
      RetentionInDays: !Ref LambdaLogsRetention

  TriggerTranscriberLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TriggerTranscriber}
      RetentionInDays: !Ref LambdaLogsRetention

  TranscriberLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Transcriber}
      RetentionInDays: !Ref LambdaLogsRetention

  KeywordCheckLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${KeywordCheck}
      RetentionInDays: !Ref LambdaLogsRetention

  ProcessContactSummaryLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ProcessContactSummary}
      RetentionInDays: !Ref LambdaLogsRetention

  CaptureContactDetails:
    Type: AWS::Serverless::Function
    Properties:
      Description: AWS Lambda Function that will be triggered when the call starts so that we have the initial contact details which can later add to when we have the transcript, and audio file location.
      Handler: index.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource:
                - !GetAtt ContactDetails.Arn
      Runtime: python3.7
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          table_name: !Ref ContactDetails
      InlineCode: |
        import json
        import boto3
        import os
        import datetime

        def lambda_handler(event, context):
          print(f'Event From Amazon Connect: {json.dumps(event)}')

          ddb = boto3.client('dynamodb')
          ddb.update_item(
            TableName = os.environ['table_name'],
            Key = {
              'ContactId': {'S': event['Details']['ContactData']['ContactId']}
            },
            ExpressionAttributeValues = {
              ':var1': {'S': event['Details']['ContactData']['CustomerEndpoint']['Address']},
              ':var2': {'S': datetime.datetime.utcnow().strftime('%Y-%m-%d')},
              ':var3': {'S': datetime.datetime.now().strftime('%a %b %-d %Y %H:%M:%S')}
            },
            UpdateExpression = 'SET CustomerPhoneNumber = :var1, CallDate = :var2, CallTimestamp = :var3'
          )

          return {
            'lambdaResult': 'Success'
          }

  TriggerTranscriber:
    Type: AWS::Serverless::Function
    Properties:
      Description: AWS Lambda Function to start (asynchronous) streaming transcription; it is expected to be called by the Amazon Connect Contact Flow.
      Handler: index.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'lambda:InvokeFunction'
              Resource:
                - !GetAtt Transcriber.Arn
      Runtime: python3.7
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          transcribe_function: !Ref Transcriber
      InlineCode: |
        import json
        import boto3
        import os

        def lambda_handler(event, context):
          print(f'Received event from Amazon Connect {json.dumps(event)}')

          payload = {
            'streamARN': event['Details']['ContactData']['MediaStreams']['Customer']['Audio']['StreamARN'],
            'startFragmentNum': event['Details']['ContactData']['MediaStreams']['Customer']['Audio']['StartFragmentNumber'],
            'connectContactId': event['Details']['ContactData']['ContactId'],
            'transcriptionEnabled': event['Details']['ContactData']['Attributes']['transcribeCall'].lower() == 'true',
            'saveCallRecording': event['Details']['ContactData']['Attributes']['saveCallRecording'].lower() == 'true',
            'languageCode': event['Details']['ContactData']['Attributes']['languageCode']
          };
          print(f'Trigger event passed to transcriberFunction: {json.dumps(payload)}')

          lam = boto3.client('lambda')
          lam.invoke(
            FunctionName = os.environ['transcribe_function'],
            InvocationType = 'Event',
            Payload = json.dumps(payload),
          )

          return {
            'lambdaResult': 'Success'
          }

  Transcriber:
    Type: AWS::Serverless::Function
    Properties:
      Description: Process audio from Kinesis Video Stream and use Amazon Transcribe to get text for the caller audio. Will be invoked by the kvsConsumerTrigger Lambda, writes results to the transcript DynamoDB tables, and uploads the audio file to S3.
      Handler: com.amazonaws.kvstranscribestreaming.KVSTranscribeStreamingLambda::handleRequest
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:Query'
                - 'dynamodb:Scan'
                - 'dynamodb:PutItem'
                - 'dynamodb:UpdateItem'
                - 'dynamodb:GetRecords'
                - 'dynamodb:GetShardIterator'
                - 'dynamodb:DescribeStream'
                - 'dynamodb:ListStreams'
              Resource:
                - !GetAtt InboundAudio.Arn
                - !GetAtt OutboundAudio.Arn
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:PutObjectAcl
              Resource:
                - !Sub '${ConnectData.Arn}/*'
            - Effect: Allow
              Action:
                - 'transcribe:DeleteTranscriptionJob'
                - 'transcribe:GetTranscriptionJob'
                - 'transcribe:GetVocabulary'
                - 'transcribe:ListTranscriptionJobs'
                - 'transcribe:ListVocabularies'
                - 'transcribe:StartStreamTranscription'
                - 'transcribe:StartTranscriptionJob'
              Resource: '*'
            - Effect: Allow
              Action:
                - 'kinesisvideo:Describe*'
                - 'kinesisvideo:Get*'
                - 'kinesisvideo:List*'
              Resource: '*'
      Runtime: java11
      MemorySize: 512
      Timeout: 900
      Environment:
        Variables:
          APP_REGION: !Ref AWS::Region
          TRANSCRIBE_REGION: !Ref TranscribeRegion
          RECORDINGS_BUCKET_NAME: !Ref ConnectData
          RECORDINGS_KEY_PREFIX: recordings/
          INPUT_KEY_PREFIX: audio-file-input/
          TABLE_CALLER_TRANSCRIPT: !Ref InboundAudio
          TABLE_CALLER_TRANSCRIPT_TO_CUSTOMER: !Ref OutboundAudio
          RECORDINGS_PUBLIC_READ_ACL: 'FALSE'
          CONSOLE_LOG_TRANSCRIPT_FLAG: 'TRUE'
          LOGGING_LEVEL: 'FINE'
          SAVE_PARTIAL_TRANSCRIPTS: 'TRUE'
          START_SELECTOR_TYPE: 'NOW'
          SEND_ANONYMOUS_DATA: 'Yes'
      CodeUri:
        Bucket: !Ref LambdaCodeS3Bucket
        Key: !Ref LambdaCodeS3Key

  KeywordCheck:
    Type: AWS::Serverless::Function
    Properties:
      Description: AWS Lambda Function that will be triggered from a DynamoDB stream to watch for key words in the stream.
      Handler: index.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SsmParameter}
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !GetAtt ContactDetails.Arn
            - Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - !Ref SnsTopic
      Runtime: python3.7
      MemorySize: 128
      Timeout: 120
      Environment:
        Variables:
          trigger_words_parameter: !Ref SsmParameter
          table_name: !Ref ContactDetails
          sns_topic_arn: !Ref SnsTopic
      Events:
        DBTrigger:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt InboundAudio.StreamArn
            StartingPosition: LATEST
      InlineCode: |
        import json
        import boto3
        import os

        def lambda_handler(event, context):
            print(json.dumps(event))

            ssm = boto3.client('ssm')
            ddb = boto3.client('dynamodb')
            sns = boto3.client('sns')

            get_parameter = ssm.get_parameter(Name = os.environ['trigger_words_parameter'])
            connect_trigger_words = get_parameter['Parameter']['Value'].lower().split(',')

            for record in event['Records']:
                if record['eventName'] in ['INSERT','MODIFY']:
                    if not record['dynamodb']['NewImage']['IsPartial']['BOOL']:
                        matches = [k for k in connect_trigger_words if k in record['dynamodb']['NewImage']['Transcript']['S'].lower()]
                        if len(matches) > 0:
                            dbResults = ddb.query(
                                TableName = os.environ['table_name'],
                                KeyConditionExpression = 'ContactId = :varContactId',
                                ExpressionAttributeValues = {
                                    ':varContactId': {'S': record['dynamodb']['NewImage']['ContactId']['S']}
                                }
                            )
                            dbResults['Items'][0]['MatchedTransscript'] = record['dynamodb']['NewImage']['Transcript']['S']
                            dbResults['Items'][0]['MatchedWords'] = matches
                            publish = sns.publish(
                                TopicArn = os.environ['sns_topic_arn'],
                                Subject = 'Connect key word alert',
                                Message = json.dumps(dbResults['Items'][0])
                            )
                            print(publish)

  ProcessContactSummary:
    Type: AWS::Serverless::Function
    Properties:
      Description: AWS Lambda Function that will be triggered when the wav call recording file is placed in S3. This function will collect all the transcript segments, and the audio file location and update the contact db.
      Handler: index.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !GetAtt InboundAudio.Arn
                - !GetAtt OutboundAudio.Arn
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource:
                - !GetAtt ContactDetails.Arn
      Runtime: python3.7
      MemorySize: 128
      Timeout: 120
      Environment:
        Variables:
          contact_table_name: !Ref ContactDetails
          transcript_seg_table_name: !Ref InboundAudio
          transcript_seg_to_customer_table_name: !Ref OutboundAudio
      Events:
        S3Trigger:
          Type: S3
          Properties:
            Bucket: !Ref ConnectData
            Events: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: recordings/
                  - Name: suffix
                    Value: wav
      InlineCode: |
        import json
        import boto3
        import os
        import urllib.parse
        
        ddb = boto3.client('dynamodb')
        
        def lambda_handler(event, context):
            print(f'Received event: {json.dumps(event)}')
        
            # Get the object from the event and show its content type
            bucket = event['Records'][0]['s3']['bucket']['name']
            key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')
        
            # set the download URL
            recording_url = f'https://{bucket}.s3.amazonaws.com/{key}'
        
            # get file name ie: ContactID
            parsed = urllib.parse.urlparse(recording_url)
            file = os.path.basename(parsed.path)
            contact_id = file.split('_')[0]
        
            print(f'Received event for this contact ID: {contact_id}')
        
            contact_transcript_inbound = getTranscript(contact_id, os.environ['transcript_seg_table_name'])
            contact_transcript_outbound = getTranscript(contact_id, os.environ['transcript_seg_to_customer_table_name'])
        
            ddb.update_item(
                TableName = os.environ['contact_table_name'],
                Key = {
                    'ContactId': {'S': contact_id}
                },
                ExpressionAttributeValues = {
                    ':var1': {'S': contact_transcript_inbound},
                    ':var2': {'S': contact_transcript_outbound},
                    ':var3': {'S': recording_url}
                },
                UpdateExpression = 'SET ContactTranscriptFromCustomer = :var1, ContactTranscriptToCustomer = :var2, RecordingURL = :var3'
            )
        
        def getTranscript(contact_id, table_name):
            dbResults = ddb.query(
                TableName = table_name,
                KeyConditionExpression = 'ContactId = :varContactId',
                ExpressionAttributeValues = {
                    ':varContactId': {'S': contact_id}
                }
            )
        
            transcript = ' '.join([r['Transcript']['S'] for r in dbResults['Items'] if 'Transcript' in r])
            transcript = transcript if transcript != '' else 'Transcript not available for this call'
        
            print(f'table ({table_name}) has the transcript: {transcript}')
        
            return transcript

  SsmParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Parameter to store the list of key words to listen for in the inbound transcript.
      Type: StringList
      Value: emergency,spark,surge

  SnsTopic:
    Type: AWS::SNS::Topic
